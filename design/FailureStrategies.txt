FailureStrategies:
==================
This Document describes the development and Run-Time failure strategies for the AGSE.


Development:
------------
The developmental challenges/failures and the associated mitigation strategy we are employing are enumerated below:

Development machine failure / code loss:
We will be using a multiply-backed up development repository hosting our AGSE design and code which will ensure that even if all of the team's personal computers crash and all our local copies of the code and design are lost, we will have multiple backups available to continue where development left off.

Personal Health Issues or Time Issues:
We have multiple competent developers working on the AGSE system who are each aware of the design and implementation details so that if any one team member is unhealthy or occupied by other work, the development can continue through the other team members.

Hardware Lock-In and Complex Development:
The development of the system proceeds in a modular approach, with development platforms being swapped in and out as the code and design matures.  This allows the design and implementation to start off simple, with individual components (that are simpler to develop for) being replaced or removed and their functionality being integrated into a more sophisticated component.  For instance, we can develop the code to control the actuators and receive the sensor data on simpler devices (like an Arduino), and migrate that code into the larger code base on the main platform as both platforms' code matures.

Integration Issues:
By utilizing a modular design and implementation approach (with respect to both hardware and software) we can independently develop smaller units of functionality and test their integration in a more well-defined manner to ensure that each component works and works together before proceeding futher with integration.  The use of unit tests for each component aids in this strategy.  

Deadlines:
By building the system in a modular manner and adding in more advanced features only as the basic features are guaranteed to work, we can ensure that at each stage of development we have a working system.  Should one stage not be able to be finished due to deadline issues, we can fall back to the previous working stage.  Finally, we have developed an in-depth development and testing timeline which ensures that each team member has a task and that thier task is related to their areas of expertise.  

Software Complexity and Developmental Bugs:
Much of our code complexity will come from the image processing algorithms that we will be using.  To minimize the number of developental bugs and challenges will be starting our implementations using off-the-shelf algorithms as a base.  These will be provided as CUDA libraries, which enjoys a large user-base and many avenues of debugging and developmental assistance.  

Run-Time:
---------