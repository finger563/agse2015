/*
 * ROS Workspace Model
 */

// ROS Package - agse_package
package agse_package
{
    // Set of ROS Messages
    messages 
    {
        // ROS msg - sampleState
        msg sampleState
        {
            agse_package/samplePosition pos;
            agse_package/sampleOrientation orientation;
        } 
        // ROS msg - samplePosition
        msg samplePosition
        {
            float32 r;
            float32 theta;
            float32 z;
        } 
        // ROS msg - sampleOrientation
        msg sampleOrientation
        {
            float32 theta;
            float32 phi;
        } 
        // ROS msg - controlInputs
        msg controlInputs
        {
            bool paused;
            bool start;
            bool stop;
        } 
        // ROS msg - payloadBayState
        msg payloadBayState
        {
            agse_package/payloadBayPosition pos;
            agse_package/payloadBayOrientation orientation;
        } 
        // ROS msg - payloadBayPosition
        msg payloadBayPosition
        {
            float64 r;
            float64 theta;
            float64 z;
        } 
        // ROS msg - payloadBayOrientation
        msg payloadBayOrientation
        {
            float64 theta;
            float64 phi;
        } 
    }

    // Set of ROS Services
    services
    {
        // ROS srv - sampleStateFromImage
        srv sampleStateFromImage
        {
            request
            {
            }

            response
            {
                int8 status;
                float32 x;
                float32 y;
                float32 angle;
            }
        }
        // ROS srv - verticalPos
        srv verticalPos
        {
            request
            {
                int64 goal;
                bool update;
            }

            response
            {
                int64 current;
            }
        }
        // ROS srv - armRotation
        srv armRotation
        {
            request
            {
                int64 goal;
                bool update;
            }

            response
            {
                int64 current;
            }
        }
        // ROS srv - radialPos
        srv radialPos
        {
            request
            {
                int64 goal;
                bool update;
            }

            response
            {
                int64 current;
            }
        }
        // ROS srv - gripperPos
        srv gripperPos
        {
            request
            {
                int64 goal;
                bool update;
            }

            response
            {
                int64 current;
            }
        }
        // ROS srv - gripperRotation
        srv gripperRotation
        {
            request
            {
                int64 goal;
                bool update;
            }

            response
            {
                int64 current;
            }
        }
        // ROS srv - captureImage
        srv captureImage
        {
            request
            {
            }

            response
            {
                uint8[] imgVector;
                int16 width;
                int16 height;
            }
        }
        // ROS srv - payloadBayStateFromImage
        srv payloadBayStateFromImage
        {
            request
            {
            }

            response
            {
                int8 status;
                float32 x;
                float32 y;
                float32 angle;
            }
        }
    }

    // Set of ROS Components
    components
    {
        // ROS Component - radial_actuator_controller
	component radial_actuator_controller
	{
            provides radialPos;
     	    subscriber<controlInputs> controlInputs_sub;
	    timer radialPosTimer
	    {
	        period = 0.01s;
	    }
	}
        // ROS Component - vertical_actuator_controller
	component vertical_actuator_controller
	{
            provides verticalPos;
     	    subscriber<controlInputs> controlInputs_sub;
	    timer verticalPosTimer
	    {
	        period = 0.01s;
	    }
	}
        // ROS Component - arm_controller
	component arm_controller
	{
	    requires sampleStateFromImage;
	    requires radialPos;
	    requires armRotation;
	    requires gripperRotation;
	    requires verticalPos;
	    requires gripperPos;
	    requires payloadBayStateFromImage;
	    publisher<sampleState> sampleState_pub;
	    publisher<payloadBayState> payloadBayState_pub;
     	    subscriber<controlInputs> controlInputs_sub;
	    timer armTimer
	    {
	        period = 0.02s;
	    }
	}
        // ROS Component - image_processor
	component image_processor
	{
            provides sampleStateFromImage;
            provides payloadBayStateFromImage;
	    requires captureImage;
     	    subscriber<controlInputs> controlInputs_sub;
	}
        // ROS Component - user_input_controller
	component user_input_controller
	{
	    publisher<controlInputs> controlInputs_pub;
     	    subscriber<sampleState> sampleState_sub;
     	    subscriber<payloadBayState> payloadBayState_sub;
	    timer userInputTimer
	    {
	        period = 0.01s;
	    }
	}
        // ROS Component - servo_controller
	component servo_controller
	{
            provides armRotation;
            provides gripperPos;
            provides gripperRotation;
     	    subscriber<controlInputs> controlInputs_sub;
	    timer servoTimer
	    {
	        period = 1.0s;
	    }
	}
        // ROS Component - image_sensor
	component image_sensor
	{
            provides captureImage;
     	    subscriber<controlInputs> controlInputs_sub;
	}
    }

    // Set of ROS Nodes in this package
    nodes
    {
        node arm 
	{
            // Instantiating components in ROS node
     	    component<arm_controller> arm_controller_i;
	}
        node positioning 
	{
            // Instantiating components in ROS node
     	    component<radial_actuator_controller> radial_controller_i;
     	    component<vertical_actuator_controller> vertical_controller_i;
	}
        node user_input 
	{
            // Instantiating components in ROS node
     	    component<user_input_controller> user_intput_controller_i;
	}
        node imager 
	{
            // Instantiating components in ROS node
     	    component<image_sensor> image_sensor_i;
	}
        node detector 
	{
            // Instantiating components in ROS node
     	    component<image_processor> image_processor_i;
	}
        node servos 
	{
            // Instantiating components in ROS node
     	    component<servo_controller> servo_controller_i;
	}
    }
}
