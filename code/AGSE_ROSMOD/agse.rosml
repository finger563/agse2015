workspace agse;
package arm
{
    messages
    {
        msg gripperOrientation
        {
            int theta;
        }
        msg gripperState
        {
            arm/gripperOrientation orientation;
            arm/gripperPos position;
        }
        msg gripperPos
        {
            float r;
            float theta;
            float z;
        }
        msg sampleState
        {
            arm/samplePosition pos;
            arm/sampleOrientation orientation;
        }
        msg samplePosition
        {
            float r;
            float theta;
            float z;
        }
        msg sampleOrientation
        {
            float theta;
            float phi;
        }
    }
    services
    {
        srv setGripperPos
        {
            request
            {
                int value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setRadialPos
        {
            request
            {
                int value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setVerticalPos
        {
            request
            {
                int value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setRotation
        {
            request
            {
                int value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setGripperRotation
        {
            request
            {
                int value;
            }
            response
            {
                bool settingComplete;
            }
        }
    }
    components
    {
        component radial_actuator_controller
        {
            provides setRadialPos;
        }
        component vertical_actuator_controller
        {
            provides setVerticalPos;
        }
        component rotational_actuator_controller
        {
            provides setRotation;
        }
        component gripper_controller
        {
            provides setGripperPos;
            provides setGripperRotation;
        }
        component arm_controller
        {
            requires setRotation;
            requires setRadialPos;
            requires setVerticalPos;
            requires setGripperPos;
            requires setGripperRotation;
            publisher<gripperState> gripperState_pub;
            subscriber<sampleState> sampleState_sub;
        }
        component image_processor
        {
            publisher<sampleState> sampleState_pub;
            subscriber<gripperState> gripperState_sub;
        }
    }
    nodes
    {
        node gripper
        {
            component<gripper_controller> gripper_controller_i;
        }
        node positioning
        {
            component<radial_actuator_controller> radial_controller_i;
            component<vertical_actuator_controller> vertical_controller_i;
            component<rotational_actuator_controller> rotational_controller_i;
        }
        node arm
        {
            component<arm_controller> arm_controller_i;
        }
        node camera
        {
            component<image_processor> image_processor_i;
        }
    }
}