workspace agse;
package agse_package
{
    messages
    {
        msg sampleState
        {
            agse_package/samplePosition pos;
            agse_package/sampleOrientation orientation;
        }
        msg samplePosition
        {
            float32 r;
            float32 theta;
            float32 z;
        }
        msg sampleOrientation
        {
            float32 theta;
            float32 phi;
        }
    }
    services
    {
        srv setGripperPos
        {
            request
            {
                int64 value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setRadialPos
        {
            request
            {
                int64 value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setVerticalPos
        {
            request
            {
                int64 value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setGripperRotation
        {
            request
            {
                int64 value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv setArmRotation
        {
            request
            {
                int64 value;
            }
            response
            {
                bool settingComplete;
            }
        }
        srv sampleStateFromImage
        {
            response
            {
                bool foundSample;
                agse_package/sampleState sample;
            }
        }
    }
    components
    {
        component radial_actuator_controller
        {
            provides setRadialPos;
        }
        component vertical_actuator_controller
        {
            provides setVerticalPos;
        }
        component gripper_controller
        {
            provides setGripperPos;
            provides setGripperRotation;
        }
        component arm_controller
        {
            requires setRadialPos;
            requires setVerticalPos;
            requires setGripperPos;
            requires setGripperRotation;
            requires setArmRotation;
            requires sampleStateFromImage;
            timer armTimer
            {
                period = 0.02s;
            }
        }
        component image_processor
        {
            provides sampleStateFromImage;
            timer imageTimer
            {
                period = 0.04s;
            }
        }
        component arm_rotation_controller
        {
            provides setArmRotation;
        }
    }
    nodes
    {
        node gripper
        {
            component<gripper_controller> gripper_controller_i;
        }
        node arm
        {
            component<arm_controller> arm_controller_i;
        }
        node camera
        {
            component<image_processor> image_processor_i;
        }
        node positioning
        {
            component<radial_actuator_controller> radial_controller_i;
            component<vertical_actuator_controller> vertical_controller_i;
            component<arm_rotation_controller> rotational_controller_i;
        }
    }
}