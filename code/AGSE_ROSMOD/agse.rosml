workspace agse;
package agse_package
{
    messages
    {
        msg sampleState
        {
            agse_package/samplePosition pos;
            agse_package/sampleOrientation orientation;
        }
        msg samplePosition
        {
            float32 r;
            float32 theta;
            float32 z;
        }
        msg sampleOrientation
        {
            float32 theta;
            float32 phi;
        }
        msg controlInputs
        {
            bool paused;
            bool start;
            bool stop;
        }
    }
    services
    {
        srv sampleStateFromImage
        {
            response
            {
                bool foundSample;
                agse_package/sampleState sample;
            }
        }
        srv verticalPos
        {
            request
            {
                int64 goal;
                bool update;
            }
            response
            {
                int64 current;
            }
        }
        srv armRotation
        {
            request
            {
                int64 goal;
                bool update;
            }
            response
            {
                int64 current;
            }
        }
        srv radialPos
        {
            request
            {
                int64 goal;
                bool update;
            }
            response
            {
                int64 current;
            }
        }
        srv gripperPos
        {
            request
            {
                int64 goal;
                bool update;
            }
            response
            {
                int64 current;
            }
        }
        srv gripperRotation
        {
            request
            {
                int64 goal;
                bool update;
            }
            response
            {
                int64 current;
            }
        }
    }
    components
    {
        component radial_actuator_controller
        {
            provides radialPos;
            subscriber<controlInputs> controlInputs_sub;
            timer radialPosTimer
            {
                period = 0.01s;
            }
        }
        component vertical_actuator_controller
        {
            provides verticalPos;
            subscriber<controlInputs> controlInputs_sub;
            timer verticalPosTimer
            {
                period = 0.01s;
            }
        }
        component gripper_controller
        {
            provides gripperRotation;
            provides gripperPos;
            subscriber<controlInputs> controlInputs_sub;
            timer gripperTimer
            {
                period = 0.01s;
            }
        }
        component arm_controller
        {
            requires sampleStateFromImage;
            requires radialPos;
            requires armRotation;
            requires gripperRotation;
            requires verticalPos;
            requires gripperPos;
            subscriber<controlInputs> controlInputs_sub;
            timer armTimer
            {
                period = 0.02s;
            }
        }
        component image_processor
        {
            provides sampleStateFromImage;
            subscriber<controlInputs> controlInputs_sub;
            timer imageTimer
            {
                period = 0.04s;
            }
        }
        component arm_rotation_controller
        {
            provides armRotation;
            subscriber<controlInputs> controlInputs_sub;
            timer armRotationTimer
            {
                period = 0.01s;
            }
        }
        component user_input_controller
        {
            publisher<controlInputs> controlInputs_pub;
            timer userInputTimer
            {
                period = 0.01s;
            }
        }
    }
    nodes
    {
        node gripper
        {
            component<gripper_controller> gripper_controller_i;
        }
        node arm
        {
            component<arm_controller> arm_controller_i;
        }
        node camera
        {
            component<image_processor> image_processor_i;
        }
        node positioning
        {
            component<radial_actuator_controller> radial_controller_i;
            component<vertical_actuator_controller> vertical_controller_i;
            component<arm_rotation_controller> rotational_controller_i;
        }
        node user_input
        {
            component<user_input_controller> user_intput_controller_i;
        }
    }
}